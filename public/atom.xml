<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>3103&#39;s Notes</title>
  
  <subtitle>Quick notes</subtitle>
  <link href="/3103-developer-team-blog/atom.xml" rel="self"/>
  
  <link href="https://3103-developer-team.github.io/"/>
  <updated>2018-02-01T07:26:56.000Z</updated>
  <id>https://3103-developer-team.github.io/</id>
  
  <author>
    <name>3101的哥伦布们</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android-Sentry错误监控服务</title>
    <link href="https://3103-developer-team.github.io/2018/02/01/Android-Sentry%E9%94%99%E8%AF%AF%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1/"/>
    <id>https://3103-developer-team.github.io/2018/02/01/Android-Sentry错误监控服务/</id>
    <published>2018-02-01T06:46:07.000Z</published>
    <updated>2018-02-01T07:26:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><p>The Sentry Android SDK is built on top of the main Java SDK and supports all of the same features, configuration options, and more. Adding version 1.6.6 of the Android SDK to a sample application that doesn’t even use Proguard only increased the release .apk size by approximately 200KB.</p><p>Events will be buffered to disk (in the application’s cache directory) by default. This allows events to be sent at a later time if the device does not have connectivity when an event is created. This can be disabled by setting the option buffer.enabled to false.</p><p>An UncaughtExceptionHandler is configured so that crash events will be stored to disk and sent the next time the application is run.</p><p>The AndroidEventBuilderHelper is enabled by default, which will automatically enrich events with data about the current state of the device, such as memory usage, storage usage, display resolution, connectivity, battery level, model, Android version, whether the device is rooted or not, etc.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Using Gradle (Android Studio) in your app/build.gradle add:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'io.sentry:sentry-android:1.6.6'</span></span><br></pre></td></tr></table></figure><p>For other dependency managers see the central Maven repository.</p><h2 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h2><p>Your application must have permission to access the internet in order to send events to the Sentry server. In your AndroidManifest.xml:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.INTERNET"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span><br></pre></td></tr></table></figure><p>Then initialize the Sentry client in your application’s main onCreate method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.sentry.Sentry;</span><br><span class="line"><span class="keyword">import</span> io.sentry.android.AndroidSentryClientFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        Context ctx = <span class="keyword">this</span>.getApplicationContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the Sentry DSN (client key) from the Project Settings page on Sentry</span></span><br><span class="line">        String sentryDsn = <span class="string">"https://publicKey:secretKey@host:port/1?options"</span>;</span><br><span class="line">        Sentry.init(sentryDsn, <span class="keyword">new</span> AndroidSentryClientFactory(ctx));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Alternatively, if you configured your DSN in a `sentry.properties`</span></span><br><span class="line">        <span class="comment">// file (see the configuration documentation).</span></span><br><span class="line">        Sentry.init(<span class="keyword">new</span> AndroidSentryClientFactory(ctx));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can optionally configure other values such as environment and release. See the configuration page for ways you can do this.</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>Now you can use Sentry to capture events anywhere in your application:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.sentry.context.Context;</span><br><span class="line"><span class="keyword">import</span> io.sentry.event.BreadcrumbBuilder;</span><br><span class="line"><span class="keyword">import</span> io.sentry.event.UserBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An example method that throws an exception.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unsafeMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"You shouldn't call this!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Note that the ``Sentry.init`` method must be called before the static API</span></span><br><span class="line"><span class="comment">     * is used, otherwise a ``NullPointerException`` will be thrown.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">logWithStaticAPI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Record a breadcrumb in the current context which will be sent</span></span><br><span class="line"><span class="comment">        with the next event(s). By default the last 100 breadcrumbs are kept.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Sentry.getContext().recordBreadcrumb(</span><br><span class="line">            <span class="keyword">new</span> BreadcrumbBuilder().setMessage(<span class="string">"User made an action"</span>).build()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the user in the current context.</span></span><br><span class="line">        Sentry.getContext().setUser(</span><br><span class="line">            <span class="keyword">new</span> UserBuilder().setEmail(<span class="string">"hello@sentry.io"</span>).build()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        This sends a simple event to Sentry using the statically stored instance</span></span><br><span class="line"><span class="comment">        that was created in the ``main`` method.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Sentry.capture(<span class="string">"This is a test"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            unsafeMethod();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// This sends an exception event to Sentry using the statically stored instance</span></span><br><span class="line">            <span class="comment">// that was created in the ``main`` method.</span></span><br><span class="line">            Sentry.capture(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ProGuard"><a href="#ProGuard" class="headerlink" title="ProGuard"></a>ProGuard</h2><p>In order to use ProGuard with Sentry you will need to upload the proguard mapping files to Sentry by using our Gradle integration (recommended) or manually by using sentry-cli</p><h2 id="Gradle-Integration"><a href="#Gradle-Integration" class="headerlink" title="Gradle Integration"></a>Gradle Integration</h2><p>Using Gradle (Android Studio) in your app/build.gradle add:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'io.sentry.android.gradle'</span></span><br></pre></td></tr></table></figure><p>And declare a dependency in your toplevel build.gradle:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'io.sentry:sentry-android-gradle-plugin:1.6.6'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The plugin will then automatically generate appropriate ProGuard mapping files and upload them when you run gradle assembleRelease. The credentials for the upload step are loaded from a sentry.properties file in your project root or via environment variables, for more information see the sentry-cli documentation. At the very minimum you will need something like this:</p><p>SHOWING CONFIGURATION FOR:EXAMPLE DSN</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defaults.project=your-project</span><br><span class="line">defaults.org=your-org</span><br><span class="line">auth.token=YOUR_AUTH_TOKEN</span><br></pre></td></tr></table></figure><p>You can find your authentication token on the Sentry API page. For more information about the available configuration options see /learn/cli/configuration.</p><h2 id="Gradle-Configuration"><a href="#Gradle-Configuration" class="headerlink" title="Gradle Configuration"></a>Gradle Configuration</h2><p>Additionally we expose a few configuration values directly in Gradle:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sentry &#123;</span><br><span class="line">    <span class="comment">// Disables or enables the automatic configuration of proguard</span></span><br><span class="line">    <span class="comment">// for Sentry.  This injects a default config for proguard so</span></span><br><span class="line">    <span class="comment">// you don't need to do it manually.</span></span><br><span class="line">    autoProguardConfig <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enables or disables the automatic upload of mapping files</span></span><br><span class="line">    <span class="comment">// during a build.  If you disable this you'll need to manually</span></span><br><span class="line">    <span class="comment">// upload the mapping files with sentry-cli when you do a release.</span></span><br><span class="line">    autoUpload <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Manual-Integration"><a href="#Manual-Integration" class="headerlink" title="Manual Integration"></a>Manual Integration</h2><p>If you choose not to use the Gradle integration, you may handle the processing and upload steps manually. However, it is highly recommended that you use the Gradle integration if at all possible.</p><p>First, you need to add the following to your ProGuard rules file:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-keepattributes LineNumberTable,SourceFile</span><br><span class="line">-dontwarn org.slf4j.**</span><br><span class="line">-dontwarn javax.**</span><br></pre></td></tr></table></figure><h2 id="ProGuard-UUIDs"><a href="#ProGuard-UUIDs" class="headerlink" title="ProGuard UUIDs"></a>ProGuard UUIDs</h2><p>After ProGuard files are generated you will need to embed the UUIDs of the ProGuard mapping files in a properties file named sentry-debug-meta.properties in the assets folder. The Java SDK will look for the UUIDs there to link events to the correct mapping files on the server side.</p><p>Note<br>Sentry calculates UUIDs for proguard files. For more information about how this works see UUID Format.<br>sentry-cli can write the sentry-debug-meta.properties file for you:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sentry-cli upload-proguard \</span><br><span class="line">    --android-manifest app/build/intermediates/manifests/full/release/AndroidManifest.xml \</span><br><span class="line">    --write-properties app/build/intermediates/assets/release/sentry-debug-meta.properties \</span><br><span class="line">    --no-upload \</span><br><span class="line">    app/build/outputs/mapping/release/mapping.txt</span><br></pre></td></tr></table></figure><p>Note that this file needs to be in your APK, so this needs to be run before the APK is packaged. You can do that by creating a gradle task that runs before the dex packaging.</p><p>You can for example add a gradle task after the proguard step and before the dex one which executes sentry-cli to validate and process the mapping files and to write the UUIDs into the properties file:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">gradle.projectsEvaluated &#123;</span><br><span class="line">    android.applicationVariants.each &#123; variant -&gt;</span><br><span class="line">        def variantName = variant.name.capitalize();</span><br><span class="line">        def proguardTask = project.tasks.findByName(</span><br><span class="line">            <span class="string">"transformClassesAndResourcesWithProguardFor$&#123;variantName&#125;"</span>)</span><br><span class="line">        def dexTask = project.tasks.findByName(</span><br><span class="line">            <span class="string">"transformClassesWithDexFor$&#123;variantName&#125;"</span>)</span><br><span class="line">        def task = project.tasks.create(</span><br><span class="line">                name: <span class="string">"processSentryProguardFor$&#123;variantName&#125;"</span>,</span><br><span class="line">                type: Exec) &#123;</span><br><span class="line">            workingDir project.rootDir</span><br><span class="line">            commandLine *[</span><br><span class="line">                <span class="string">"sentry-cli"</span>,</span><br><span class="line">                <span class="string">"upload-proguard"</span>,</span><br><span class="line">                <span class="string">"--write-properties"</span>,</span><br><span class="line">                <span class="string">"$&#123;project.rootDir.toPath()&#125;/app/build/intermediates/assets"</span> +</span><br><span class="line">                    <span class="string">"/$&#123;variant.dirName&#125;/sentry-debug-meta.properties"</span>,</span><br><span class="line">                variant.getMappingFile(),</span><br><span class="line">                <span class="string">"--no-upload"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">        dexTask.dependsOn task</span><br><span class="line">        task.dependsOn proguardTask</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Alternatively you can generate a UUID upfront yourself and then force Sentry to honor that UUID after upload. However this is strongly discouraged!</p><h2 id="Uploading-ProGuard-Files"><a href="#Uploading-ProGuard-Files" class="headerlink" title="Uploading ProGuard Files"></a>Uploading ProGuard Files</h2><p>Finally, you need manually upload ProGuard files with sentry-cli as follows:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sentry-cli upload-proguard \</span><br><span class="line">    --android-manifest app/build/intermediates/manifests/full/release/AndroidManifest.xml \</span><br><span class="line">    app/build/outputs/mapping/release/mapping.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android&quot;&gt;&lt;a href=&quot;#Android&quot; class=&quot;headerlink&quot; title=&quot;Android&quot;&gt;&lt;/a&gt;Android&lt;/h1&gt;&lt;h2 id=&quot;Features&quot;&gt;&lt;a href=&quot;#Features&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Android-日志监控" scheme="https://3103-developer-team.github.io/tags/Android-%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://3103-developer-team.github.io/2018/02/01/hello-world/"/>
    <id>https://3103-developer-team.github.io/2018/02/01/hello-world/</id>
    <published>2018-02-01T03:37:05.000Z</published>
    <updated>2018-02-01T03:37:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo添加travis CI</title>
    <link href="https://3103-developer-team.github.io/2017/12/06/hexo%E6%B7%BB%E5%8A%A0travis-CI/"/>
    <id>https://3103-developer-team.github.io/2017/12/06/hexo添加travis-CI/</id>
    <published>2017-12-06T07:25:29.000Z</published>
    <updated>2018-01-30T09:28:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>多人写博客，操作步骤繁琐。写一篇博客不仅需要推送博客源码到master分支，而且还要部署到gh-pages分支。</p><p>所以，为了解决这个痛点。引入Travis CI来做部署这件事情。</p><h2 id="添加组织授权"><a href="#添加组织授权" class="headerlink" title="添加组织授权"></a>添加组织授权</h2><p>如果看不到Organizations，说明还没有授权<br><img src="https://ws1.sinaimg.cn/large/006DVXJ3gy1fm799f6kclj31co13gagz.jpg" alt=""></p><p>进入到settings下面，申请授权，通过后，在travis就可以看到仓库信息了<br><img src="https://ws1.sinaimg.cn/large/006DVXJ3gy1fm7e8b9enmj30s20i1jue.jpg" alt=""></p><h2 id="创建SSH-key"><a href="#创建SSH-key" class="headerlink" title="创建SSH key"></a>创建SSH key</h2><p><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></p><h2 id="加入deploy-keys"><a href="#加入deploy-keys" class="headerlink" title="加入deploy keys"></a>加入deploy keys</h2><p>将上一步生成的id_rsa.pub，填入到 repo的 Deploy key<br><img src="http://ww1.sinaimg.cn/large/006DVXJ3gy1fm7emvzpeuj30sb0bhdhk.jpg" alt=""><br>记得要将 Allow write access 的选项选上，这样 Travis CI 才能获得 push 代码的权限</p><h2 id="加密私钥"><a href="#加密私钥" class="headerlink" title="加密私钥"></a>加密私钥</h2><p><code>gem install travis</code><br><code>travis login --auto</code><br><code>travis encrypt-file id_rsa --add</code><br>会生成加密之后的秘钥文件 id_rsa.enc，原来的文件 id_rsa 就可以删掉了</p><h2 id="SSH-Config"><a href="#SSH-Config" class="headerlink" title="SSH Config"></a>SSH Config</h2><p>为了上git默认连接ssh<br>创建一个.travis文件，放置刚才生成的id_rsa.enc<br>并且新建ssh_config文件，写入下面内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    User git</span><br><span class="line">    StrictHostKeyChecking no</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line">    IdentitiesOnly yes</span><br></pre></td></tr></table></figure></p><h2 id="编写travis配置文件"><a href="#编写travis配置文件" class="headerlink" title="编写travis配置文件"></a>编写travis配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js: stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只监听 master 分支的改动</span></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存依赖，节省持续集成时间</span></span><br><span class="line">cache:</span><br><span class="line">  npm: <span class="literal">true</span></span><br><span class="line">  directories:</span><br><span class="line">    - node_modules</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">before_install:</span><br><span class="line">  - openssl aes-256-cbc -K <span class="variable">$encrypted_3031c5337047_key</span> -iv <span class="variable">$encrypted_3031c5337047_iv</span> -<span class="keyword">in</span> .travis/id_rsa_repo.pub.enc -out ~/.ssh/id_rsa -d</span><br><span class="line">  <span class="comment"># 改变文件权限</span></span><br><span class="line">  - chmod 600 ~/.ssh/id_rsa</span><br><span class="line">  <span class="comment"># 配置 ssh</span></span><br><span class="line">  - <span class="built_in">eval</span> $(ssh-agent)</span><br><span class="line">  - ssh-add ~/.ssh/id_rsa</span><br><span class="line">  - cp .travis/ssh_config ~/.ssh/config</span><br><span class="line">  <span class="comment"># 配置 git 替换为自己的信息</span></span><br><span class="line">  - git config --global user.name <span class="string">'Travis'</span></span><br><span class="line">  - git config --global user.email Travis@hemayun.com</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">  - npm install hexo-cli -g</span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  <span class="comment"># 生成静态页面</span></span><br><span class="line">  - hexo clean</span><br><span class="line">  - hexo g -d</span><br></pre></td></tr></table></figure><p>现在只要向项目 push 代码就可以触发travis部署了<br>进入<a href="https://travis-ci.org就可以看到部署的过程了。" target="_blank" rel="noopener">https://travis-ci.org就可以看到部署的过程了。</a><br>并且build通过会有邮件通知。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>.travis.yml 的完整代码可以看我的 .travis.yml 文件，完整的代码看这里<a href="https://github.com/Hema-FE/hema-fe-blog/blob/master/.travis.yml" target="_blank" rel="noopener">https://github.com/Hema-FE/hema-fe-blog/blob/master/.travis.yml</a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li>用 Travis CI 自动部署 hexo <a href="http://blog.acwong.org/2016/03/20/auto-deploy-hexo-with-travis-CI/" target="_blank" rel="noopener">http://blog.acwong.org/2016/03/20/auto-deploy-hexo-with-travis-CI/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;多人写博客，操作步骤繁琐。写一篇博客不仅需要推送博客源码到master分支，而且还要部署到gh-pages分支。&lt;/p&gt;
&lt;p&gt;所以，为了解
      
    
    </summary>
    
    
  </entry>
  
</feed>
